// Generated by gencpp from file crosbot_explore/ExplorerFeedback.msg
// DO NOT EDIT!


#ifndef CROSBOT_EXPLORE_MESSAGE_EXPLORERFEEDBACK_H
#define CROSBOT_EXPLORE_MESSAGE_EXPLORERFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crosbot_explore
{
template <class ContainerAllocator>
struct ExplorerFeedback_
{
  typedef ExplorerFeedback_<ContainerAllocator> Type;

  ExplorerFeedback_()
    : id(0)
    , status(0)
    , operating(false)
    , searchStrategy(0)  {
    }
  ExplorerFeedback_(const ContainerAllocator& _alloc)
    : id(0)
    , status(0)
    , operating(false)
    , searchStrategy(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _status_type;
  _status_type status;

   typedef uint8_t _operating_type;
  _operating_type operating;

   typedef int32_t _searchStrategy_type;
  _searchStrategy_type searchStrategy;



  enum {
    STATUS_PAUSED = 0,
    STATUS_RUNNING = 1,
    STATUS_ARRIVED = 2,
    STATUS_BLOCKED = 3,
  };


  typedef boost::shared_ptr< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExplorerFeedback_

typedef ::crosbot_explore::ExplorerFeedback_<std::allocator<void> > ExplorerFeedback;

typedef boost::shared_ptr< ::crosbot_explore::ExplorerFeedback > ExplorerFeedbackPtr;
typedef boost::shared_ptr< ::crosbot_explore::ExplorerFeedback const> ExplorerFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crosbot_explore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'crosbot_explore': ['/home/azeng/turtle_ws/src/crosbot/crosbot_explore/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14c37f9333fc84ff10be1492d008d4b0";
  }

  static const char* value(const ::crosbot_explore::ExplorerFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14c37f9333fc84ffULL;
  static const uint64_t static_value2 = 0x10be1492d008d4b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot_explore/ExplorerFeedback";
  }

  static const char* value(const ::crosbot_explore::ExplorerFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Corresponding Action id\n\
int32 id\n\
\n\
# Status (as listed in crosbot_explore/explorer.hpp)\n\
int32   STATUS_PAUSED   = 0\n\
int32   STATUS_RUNNING  = 1\n\
int32   STATUS_ARRIVED  = 2\n\
int32   STATUS_BLOCKED  = 3\n\
int32 status\n\
\n\
# Keep updated on continuing state of exploration\n\
# Search strategy uses mode numbers\n\
bool   operating\n\
int32  searchStrategy\n\
";
  }

  static const char* value(const ::crosbot_explore::ExplorerFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.operating);
      stream.next(m.searchStrategy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExplorerFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crosbot_explore::ExplorerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crosbot_explore::ExplorerFeedback_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "operating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operating);
    s << indent << "searchStrategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.searchStrategy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CROSBOT_EXPLORE_MESSAGE_EXPLORERFEEDBACK_H
