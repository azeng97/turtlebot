// Generated by gencpp from file crosbot_msgs/ControlStatus.msg
// DO NOT EDIT!


#ifndef CROSBOT_MSGS_MESSAGE_CONTROLSTATUS_H
#define CROSBOT_MSGS_MESSAGE_CONTROLSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace crosbot_msgs
{
template <class ContainerAllocator>
struct ControlStatus_
{
  typedef ControlStatus_<ContainerAllocator> Type;

  ControlStatus_()
    : header()
    , stats_namespace()
    , level()
    , status()
    , args()  {
    }
  ControlStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stats_namespace(_alloc)
    , level(_alloc)
    , status(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stats_namespace_type;
  _stats_namespace_type stats_namespace;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _level_type;
  _level_type level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  _args_type args;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEVEL_ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEVEL_INFO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LEVEL_WARNING;

  typedef boost::shared_ptr< ::crosbot_msgs::ControlStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crosbot_msgs::ControlStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ControlStatus_

typedef ::crosbot_msgs::ControlStatus_<std::allocator<void> > ControlStatus;

typedef boost::shared_ptr< ::crosbot_msgs::ControlStatus > ControlStatusPtr;
typedef boost::shared_ptr< ::crosbot_msgs::ControlStatus const> ControlStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ControlStatus_<ContainerAllocator>::LEVEL_ERROR =
        
          "\"level_error\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ControlStatus_<ContainerAllocator>::LEVEL_INFO =
        
          "\"level_info\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ControlStatus_<ContainerAllocator>::LEVEL_WARNING =
        
          "\"level_warning\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crosbot_msgs::ControlStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crosbot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'crosbot_msgs': ['/home/azeng/turtle_ws/src/crosbot/crosbot_msgs/msg/geometry', '/home/azeng/turtle_ws/src/crosbot/crosbot_msgs/msg/controls', '/home/azeng/turtle_ws/src/crosbot/crosbot_msgs/msg/data']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_msgs::ControlStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_msgs::ControlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_msgs::ControlStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b1b69ac1f23ea296f1f5dda15caa88f";
  }

  static const char* value(const ::crosbot_msgs::ControlStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b1b69ac1f23ea29ULL;
  static const uint64_t static_value2 = 0x6f1f5dda15caa88fULL;
};

template<class ContainerAllocator>
struct DataType< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot_msgs/ControlStatus";
  }

  static const char* value(const ::crosbot_msgs::ControlStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
Header      header\n\
\n\
# Status messages may come from a specific namespace. Empty namespace comes from \"all\".\n\
# (can't directly call this field namespace, due to C++ reserved keywords)\n\
string      stats_namespace\n\
\n\
# Level of the status (info, error, warning)\n\
string      level\n\
\n\
# Status description\n\
string      status\n\
string[]    args\n\
\n\
# Status values\n\
string LEVEL_ERROR          = \"level_error\"\n\
string LEVEL_INFO           = \"level_info\"\n\
string LEVEL_WARNING        = \"level_warning\"\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::crosbot_msgs::ControlStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stats_namespace);
      stream.next(m.level);
      stream.next(m.status);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crosbot_msgs::ControlStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crosbot_msgs::ControlStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stats_namespace: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stats_namespace);
    s << indent << "level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.level);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CROSBOT_MSGS_MESSAGE_CONTROLSTATUS_H
