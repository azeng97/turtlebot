# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from crosbot_explore/ExplorerFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExplorerFeedback(genpy.Message):
  _md5sum = "14c37f9333fc84ff10be1492d008d4b0"
  _type = "crosbot_explore/ExplorerFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Corresponding Action id
int32 id

# Status (as listed in crosbot_explore/explorer.hpp)
int32   STATUS_PAUSED   = 0
int32   STATUS_RUNNING  = 1
int32   STATUS_ARRIVED  = 2
int32   STATUS_BLOCKED  = 3
int32 status

# Keep updated on continuing state of exploration
# Search strategy uses mode numbers
bool   operating
int32  searchStrategy
"""
  # Pseudo-constants
  STATUS_PAUSED = 0
  STATUS_RUNNING = 1
  STATUS_ARRIVED = 2
  STATUS_BLOCKED = 3

  __slots__ = ['id','status','operating','searchStrategy']
  _slot_types = ['int32','int32','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,status,operating,searchStrategy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExplorerFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.status is None:
        self.status = 0
      if self.operating is None:
        self.operating = False
      if self.searchStrategy is None:
        self.searchStrategy = 0
    else:
      self.id = 0
      self.status = 0
      self.operating = False
      self.searchStrategy = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2iBi().pack(_x.id, _x.status, _x.operating, _x.searchStrategy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.id, _x.status, _x.operating, _x.searchStrategy,) = _get_struct_2iBi().unpack(str[start:end])
      self.operating = bool(self.operating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2iBi().pack(_x.id, _x.status, _x.operating, _x.searchStrategy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.id, _x.status, _x.operating, _x.searchStrategy,) = _get_struct_2iBi().unpack(str[start:end])
      self.operating = bool(self.operating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iBi = None
def _get_struct_2iBi():
    global _struct_2iBi
    if _struct_2iBi is None:
        _struct_2iBi = struct.Struct("<2iBi")
    return _struct_2iBi
